{"version":3,"sources":["constants/blockchain.ts","hooks/web3Context.tsx","hooks/helpers/index.tsx","Header/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Networks","DEFAULD_NETWORK","OPTIMISM_GOERLI","Web3Context","React","createContext","useWeb3Context","web3Context","useContext","Error","onChainProvider","useMemo","Web3ContextProvider","children","useState","connected","setConnected","chainID","providerChainID","setProviderChainID","address","setAddress","uri","StaticJsonRpcProvider","provider","setProvider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","web3Modal","hasCachedProvider","cachedProvider","_initListeners","useCallback","rawProvider","on","setTimeout","window","location","reload","chain","changeNetwork","_newNetwork","oldNetwork","otherChainID","network","Number","connect","connectedProvider","Web3Provider","getNetwork","then","chainId","getSigner","getAddress","connectedAddress","disconnect","clearCachedProvider","Provider","value","ConnectMenu","web3","checkWrongNetwork","isConnected","tickerSymbol","slippage","Big","amountInput","side","PositionSide","LONG","buttonText","clickFunc","useEffect","perp","PerpetualProtocol","SupportedChainIds","providerConfigs","rpcUrl","console","log","init","result","newPositionDraft","clearingHouse","createPositionDraft","isAmountInputBase","openpos","openPosition","BeforeAll","className","style","cursor","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d677b71c.chunk.js","sourcesContent":["export const TOKEN_DECIMALS = 9;\r\n\r\nexport enum Networks {\r\n    // AVAX = 43114,\r\n    OPTIMISM = 10, // for mainnet\r\n    OPTIMISM_GOERLI = 420, // for optimism goerli\r\n}\r\n\r\n// export const DEFAULD_NETWORK = Networks.OPTIMISM;\r\nexport const DEFAULD_NETWORK = Networks.OPTIMISM_GOERLI;\r\n","import React, { useState, ReactElement, useContext, useMemo, useCallback } from \"react\";\r\nimport Web3Modal from \"web3modal\";\r\nimport { StaticJsonRpcProvider, JsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { getMainnetURI } from \"./helpers\";\r\n// import { DEFAULD_NETWORK } from \"../constants\";\r\nimport { Networks, DEFAULD_NETWORK } from \"../constants/blockchain\";\r\n// import { messages } from \"../../constants/messages\";\r\n// import { useDispatch } from \"react-redux\";\r\n// import { swithNetwork } from \"../helpers/switch-network\";\r\n\r\ntype onChainProvider = {\r\n    connect: () => Promise<Web3Provider>;\r\n    disconnect: () => void;\r\n    checkWrongNetwork: () => Promise<boolean>;\r\n    provider: JsonRpcProvider;\r\n    address: string;\r\n    connected: Boolean;\r\n    web3Modal: Web3Modal;\r\n    chainID: number;\r\n    web3?: any;\r\n    providerChainID: number;\r\n    hasCachedProvider: () => boolean;\r\n};\r\n\r\nexport type Web3ContextData = {\r\n    onChainProvider: onChainProvider;\r\n} | null;\r\n\r\nconst Web3Context = React.createContext<Web3ContextData>(null);\r\n\r\nexport const useWeb3Context = () => {\r\n    const web3Context = useContext(Web3Context);\r\n    if (!web3Context) {\r\n        throw new Error(\"useWeb3Context() can only be used inside of <Web3ContextProvider />, \" + \"please declare it at a higher level.\");\r\n    }\r\n    const { onChainProvider } = web3Context;\r\n    return useMemo(() => {\r\n        return { ...onChainProvider };\r\n    }, [web3Context]);\r\n};\r\n\r\nexport const useAddress = () => {\r\n    const { address } = useWeb3Context();\r\n    return address;\r\n};\r\n\r\nexport const Web3ContextProvider: React.FC<{ children: ReactElement }> = ({ children }) => {\r\n    // const dispatch = useDispatch();\r\n\r\n    const [connected, setConnected] = useState(false);\r\n    const [chainID, setChainID] = useState(DEFAULD_NETWORK);\r\n    const [providerChainID, setProviderChainID] = useState(DEFAULD_NETWORK);\r\n    const [address, setAddress] = useState(\"\");\r\n\r\n    const [uri, setUri] = useState(getMainnetURI());\r\n    const [provider, setProvider] = useState<JsonRpcProvider>(new StaticJsonRpcProvider(uri));\r\n\r\n    const [web3Modal] = useState<Web3Modal>(\r\n        new Web3Modal({\r\n            cacheProvider: true,\r\n            providerOptions: {\r\n                walletconnect: {\r\n                    package: WalletConnectProvider,\r\n                    options: {\r\n                        rpc: {\r\n                            // [Networks.OPTIMISM]: getMainnetURI(),\r\n                            [Networks.OPTIMISM_GOERLI]: getMainnetURI(),\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        }),\r\n    );\r\n\r\n    const hasCachedProvider = (): boolean => {\r\n        if (!web3Modal) return false;\r\n        if (!web3Modal.cachedProvider) return false;\r\n        return true;\r\n    };\r\n\r\n    const _initListeners = useCallback(\r\n        (rawProvider: JsonRpcProvider) => {\r\n            if (!rawProvider.on) {\r\n                return;\r\n            }\r\n\r\n            rawProvider.on(\"accountsChanged\", () => setTimeout(() => window.location.reload(), 1));\r\n\r\n            rawProvider.on(\"chainChanged\", async (chain: number) => {\r\n                changeNetwork(chain);\r\n            });\r\n\r\n            rawProvider.on(\"network\", (_newNetwork, oldNetwork) => {\r\n                if (!oldNetwork) return;\r\n                window.location.reload();\r\n            });\r\n        },\r\n        [provider],\r\n    );\r\n\r\n    const changeNetwork = async (otherChainID: number) => {\r\n        const network = Number(otherChainID);\r\n\r\n        setProviderChainID(network);\r\n    };\r\n\r\n    const connect = useCallback(async () => {\r\n        const rawProvider = await web3Modal.connect();\r\n\r\n        _initListeners(rawProvider);\r\n\r\n        const connectedProvider = new Web3Provider(rawProvider, \"any\");\r\n\r\n        const chainId = await connectedProvider.getNetwork().then(network => Number(network.chainId));\r\n        const connectedAddress = await connectedProvider.getSigner().getAddress();\r\n\r\n        setAddress(connectedAddress);\r\n\r\n        setProviderChainID(chainId);\r\n\r\n        // if (chainId === Networks.OPTIMISM) {\r\n        //     setProvider(connectedProvider);\r\n        // }\r\n        if (chainId === Networks.OPTIMISM_GOERLI) {\r\n            setProvider(connectedProvider);\r\n        }\r\n\r\n        setConnected(true);\r\n\r\n        return connectedProvider;\r\n    }, [provider, web3Modal, connected]);\r\n\r\n    // const checkWrongNetwork = async (): Promise<boolean> => {\r\n    //     if (providerChainID !== DEFAULD_NETWORK) {\r\n    //         const shouldSwitch = window.confirm(messages.switch_to_avalanche);\r\n    //         if (shouldSwitch) {\r\n    //             await swithNetwork();\r\n    //             window.location.reload();\r\n    //         }\r\n    //         return true;\r\n    //     }\r\n\r\n    //     return false;\r\n    // };\r\n\r\n    const disconnect = useCallback(async () => {\r\n        web3Modal.clearCachedProvider();\r\n        setConnected(false);\r\n\r\n        setTimeout(() => {\r\n            window.location.reload();\r\n        }, 1);\r\n    }, [provider, web3Modal, connected]);\r\n\r\n    const onChainProvider = useMemo(\r\n        () => ({\r\n            connect,\r\n            disconnect,\r\n            hasCachedProvider,\r\n            provider,\r\n            connected,\r\n            address,\r\n            chainID,\r\n            web3Modal,\r\n            providerChainID,            \r\n        }),\r\n        [connect, disconnect, hasCachedProvider, provider, connected, address, chainID, web3Modal, providerChainID],\r\n    );\r\n    //@ts-ignore\r\n    return <Web3Context.Provider value={{ onChainProvider }}>{children}</Web3Context.Provider>;\r\n};\r\n","export const getMainnetURI = (): string => {\r\n  return \"https://mainnet.optimism.io\";  \r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useWeb3Context } from \"../hooks/web3Context\";\r\nimport { DEFAULD_NETWORK } from \"../constants/blockchain\";\r\nimport { PerpetualProtocol, PositionSide, SupportedChainIds, Wallet, big2BigNumberAndScaleUp, getTransaction } from \"@perp/sdk-curie\";\r\nimport Big from \"big.js\"\r\nimport ContractName from \"@perp/sdk-curie\";\r\nimport { constants } from \"ethers\"\r\n// import \"./connect-menu.scss\";\r\n\r\nfunction ConnectMenu() {\r\n    const { connect, disconnect, connected, web3, provider, providerChainID, checkWrongNetwork } = useWeb3Context();    \r\n    const [isConnected, setConnected] = useState(connected);    \r\n    // const signer = provider.getSigner(\"0xE1995a6441B0e5443f5403A69e530a33249C4f2a\");\r\n\r\n    const tickerSymbol = \"ETHUSD\"\r\n    const slippage = new Big(0.02)            \r\n    const amountInput = new Big(100)\r\n    const side = PositionSide.LONG\r\n    const isAmountInputBase = false\r\n\r\n    let buttonText = \"Connect Wallet\";\r\n    let clickFunc: any = connect;\r\n    let buttonStyle = {cursor: 'pointer'};\r\n\r\n    if (isConnected) {\r\n        buttonText = \"Disconnect\";\r\n        clickFunc = disconnect;\r\n    }    \r\n\r\n    if (isConnected && providerChainID !== DEFAULD_NETWORK) {\r\n        buttonText = \"Wrong network\";\r\n        // buttonStyle = { backgroundColor: \"rgb(255, 67, 67)\" };\r\n        clickFunc = () => {\r\n            checkWrongNetwork();\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        setConnected(connected);\r\n    }, [web3, connected]);\r\n\r\n    useEffect(() => {        \r\n        async function BeforeAll() {\r\n            if( isConnected && providerChainID === DEFAULD_NETWORK ) {\r\n                const perp =  new PerpetualProtocol({\r\n                    chainId: SupportedChainIds.OPTIMISM_GOERLI,\r\n                    // chainId: SupportedChainIds.OPTIMISM,   \r\n                    // chainId: 420,                 \r\n                    providerConfigs: [\r\n                        {\r\n                            // rpcUrl: \"https://mainnet.optimism.io\",\r\n                            rpcUrl: \"https://goerli.optimism.io/\",\r\n                            \r\n                        },\r\n                    ],\r\n                });\r\n                                \r\n                console.log(\"ChainId\", SupportedChainIds.OPTIMISM_GOERLI);\r\n                const result =await perp.init();\r\n                // await perp.connect({ signer: provider.getSigner() })\r\n                const newPositionDraft = perp.clearingHouse?.createPositionDraft({\r\n                    tickerSymbol,\r\n                    side,\r\n                    amountInput,\r\n                    isAmountInputBase,\r\n                }) \r\n                console.log(\"Init perp\", result);\r\n                const openpos = perp.clearingHouse?.openPosition(newPositionDraft!, slippage);              \r\n                console.log(\"Position Draft\", newPositionDraft);\r\n                console.log(\"Perp position\", openpos);\r\n            }\r\n        }\r\n        BeforeAll();\r\n            \r\n    }, [isConnected, providerChainID]);  \r\n\r\n    return (\r\n        <div className=\"connect-button\" style={buttonStyle} onClick={clickFunc}>\r\n            <p>{buttonText}</p>   \r\n            {isConnected === true && <p>SDK curie</p>}         \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConnectMenu;\r\n","import React from 'react';\nimport ConnectMenu from \"./Header\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ConnectMenu />      \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Web3ContextProvider } from \"./hooks/web3Context\";\n\nReactDOM.render(\n  <React.StrictMode>    \n    <Web3ContextProvider>\n      <App />      \n    </Web3ContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}